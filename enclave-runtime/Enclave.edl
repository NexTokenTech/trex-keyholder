// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_backtrace.edl" import *;
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_time.edl" import *;
    from "sgx_env.edl" import *;
    from "sgx_thread.edl" import *;
    from "sgx_pipe.edl" import *;

    include "sgx_quote.h"

    trusted {
        /* define ECALLs here. */
        public sgx_status_t get_rsa_encryption_pubkey([out, size=pubkey_size] uint8_t* pubkey, uint32_t pubkey_size);
        public sgx_status_t generate_rsa_3072_pubkey([out, size=pubkey_size] uint8_t* pubkey, uint32_t pubkey_size,[out] uint32_t* effective_size);
        public sgx_status_t get_ecc_signing_pubkey(
        			[out, size=pubkey_size] uint8_t* pubkey, uint32_t pubkey_size);
        public sgx_status_t insert_key_piece([in, size=key_len] const uint8_t* key, size_t key_len, uint64_t release_time, uint32_t current_block, uint32_t ext_index);
        public sgx_status_t get_heap_free_count([out] size_t* heap_free_count);
        public sgx_status_t clear_heap();
        public sgx_status_t get_expired_key([out, size=key_len] uint8_t* key, size_t key_len, [out] uint32_t* from_block, [out] uint32_t* ext_index);
        public sgx_status_t perform_ra(
        			[in, size=genesis_hash_size] uint8_t* genesis_hash, uint32_t genesis_hash_size,
        			[in] uint32_t* nonce,
        			[in, size=w_url_size] uint8_t* w_url, uint32_t w_url_size,
        			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
        		);
        public sgx_status_t perform_expire_key(
                			[in, size=genesis_hash_size] uint8_t* genesis_hash, uint32_t genesis_hash_size,
                			[in] uint32_t* nonce,
                			[in, size=expired_key_size] uint8_t* expired_key, uint32_t expired_key_size,
                			[in] uint32_t* block_number,
                			[in] uint32_t* ext_index,
                			[out, size=unchecked_extrinsic_size] uint8_t* unchecked_extrinsic, uint32_t unchecked_extrinsic_size
                		);
        public sgx_status_t set_nonce(
                                    [in] uint32_t* nonce
                                );
        public sgx_status_t set_node_metadata(
                                    [in, size=node_metadata_size] uint8_t* node_metadata, uint32_t node_metadata_size
                                );
        public sgx_status_t test_decrypt(
                                    [in, size=plain_len] const uint8_t* plain, size_t plain_len,
                                    [in, size=cipher_len] const uint8_t* cipher, size_t cipher_len,
                                    [out] uint8_t* res
                                );
        public sgx_status_t test_key_piece(
                                    [in, size=key_len] const uint8_t* key, size_t key_len,uint64_t release_time,
                                    [out] uint8_t* res
                                );
        public sgx_status_t obtain_nts_time();
        public sgx_status_t test_rsa3072();
        public sgx_status_t encrypt_rsa3072(
                                            [in, size=plain_len] const uint8_t* plain, size_t plain_len,
                                            [out, size=cipher_len] uint8_t* cipher, size_t cipher_len
                                        );

    };
    untrusted {
    	sgx_status_t ocall_sgx_init_quote([out] sgx_target_info_t *ret_ti,
        					  [out] sgx_epid_group_id_t *ret_gid);
        sgx_status_t ocall_get_ias_socket([out] int *ret_fd);
        sgx_status_t ocall_get_quote(  [in, size = sigrl_len] uint8_t * p_sigrl,
                                                       uint32_t sigrl_len,
                                                       [in] sgx_report_t *report,
                                                       sgx_quote_sign_type_t quote_type,
                                                       [in] sgx_spid_t *p_spid,
                                                       [in] sgx_quote_nonce_t *p_nonce,
                                                       [out] sgx_report_t *p_qe_report,
                                                       [out, size = maxlen] sgx_quote_t *p_quote,
                                                       uint32_t maxlen,
                                                       [out] uint32_t* p_quote_len);
        sgx_status_t ocall_get_update_info([in] sgx_platform_info_t * platformBlob,
                					   int32_t enclaveTrusted,
                					   [out] sgx_update_info_bit_t * update_info);
        sgx_status_t ocall_get_nts_socket([out] int *ret_fd);
    };
};
